"""
Opportunity model - stores all generated trading opportunities.
"""
from sqlalchemy import Column, String, Float, Integer, DateTime, Boolean, Text, JSON
from sqlalchemy.sql import func
import uuid

from . import Base


class Opportunity(Base):
    """
    Represents a trading opportunity generated by the system.
    May or may not be executed depending on user approval or auto-execute criteria.
    """
    __tablename__ = 'opportunities'

    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))

    # Opportunity details
    pair = Column(String(10), nullable=False, index=True)
    direction = Column(String(5), nullable=False)  # BUY or SELL
    strategy = Column(String(50), nullable=False)
    timeframe = Column(String(10), nullable=False)  # 1m, 5m, 15m, 1h, 4h, 1d

    # Proposed trade parameters
    proposed_entry_price = Column(Float, nullable=False)
    proposed_size = Column(Float, nullable=False)
    proposed_stop_loss = Column(Float, nullable=False)
    proposed_take_profit = Column(Float, nullable=True)
    leverage = Column(Integer, nullable=False)

    # Analysis
    confidence_score = Column(Float, nullable=False)
    risk_reward_ratio = Column(Float, nullable=False)
    indicators_aligned = Column(Integer, nullable=False)
    indicator_details = Column(JSON, nullable=True)

    # Market context
    current_price = Column(Float, nullable=False)
    spread_pips = Column(Float, nullable=True)
    volatility = Column(Float, nullable=True)
    trend = Column(String(20), nullable=True)

    # Decision tracking
    qualifies_for_auto_execute = Column(Boolean, default=False)
    was_sent_to_user = Column(Boolean, default=False)
    user_decision = Column(String(20), nullable=True)  # approved, rejected, expired
    user_decision_time = Column(DateTime, nullable=True)

    # Execution tracking
    was_executed = Column(Boolean, default=False)
    trade_id = Column(String(36), nullable=True)  # Link to Trade if executed
    execution_time = Column(DateTime, nullable=True)

    # Metadata
    chart_image_path = Column(String(255), nullable=True)
    extra_metadata = Column(JSON, nullable=True)

    # Timestamps
    created_at = Column(DateTime, default=func.now(), nullable=False, index=True)
    expires_at = Column(DateTime, nullable=True)  # Opportunities expire after 5 minutes

    def __repr__(self) -> str:
        return f"<Opportunity(id={self.id}, pair={self.pair}, confidence={self.confidence_score})>"

    def to_dict(self) -> dict:
        return {
            'id': self.id,
            'pair': self.pair,
            'direction': self.direction,
            'strategy': self.strategy,
            'timeframe': self.timeframe,
            'proposed_entry_price': self.proposed_entry_price,
            'proposed_size': self.proposed_size,
            'proposed_stop_loss': self.proposed_stop_loss,
            'proposed_take_profit': self.proposed_take_profit,
            'confidence_score': self.confidence_score,
            'risk_reward_ratio': self.risk_reward_ratio,
            'qualifies_for_auto_execute': self.qualifies_for_auto_execute,
            'was_executed': self.was_executed,
            'created_at': self.created_at.isoformat() if self.created_at else None,
        }